// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multi_eta_struct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "multi_eta_struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MultiEtaInfo {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duration_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpDuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpDuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_multi_5feta_5fstruct_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_multi_5feta_5fstruct_2eproto() {
  protobuf_AddDesc_multi_5feta_5fstruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "multi_eta_struct.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::internal_default_instance(),
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_));
  TrafficInfo_descriptor_ = file->message_type(1);
  static const int TrafficInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficInfo, status_),
  };
  TrafficInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficInfo_descriptor_,
      TrafficInfo::internal_default_instance(),
      TrafficInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrafficInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficInfo, _internal_metadata_));
  RouteLocation_descriptor_ = file->message_type(2);
  static const int RouteLocation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteLocation, link_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteLocation, on_link_point_),
  };
  RouteLocation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouteLocation_descriptor_,
      RouteLocation::internal_default_instance(),
      RouteLocation_offsets_,
      -1,
      -1,
      -1,
      sizeof(RouteLocation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteLocation, _internal_metadata_));
  LinkInfo_descriptor_ = file->message_type(3);
  static const int LinkInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkInfo, link_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkInfo, reversed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkInfo, traffics_),
  };
  LinkInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LinkInfo_descriptor_,
      LinkInfo::internal_default_instance(),
      LinkInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(LinkInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkInfo, _internal_metadata_));
  Duration_descriptor_ = file->message_type(4);
  static const int Duration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duration, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duration, eta_),
  };
  Duration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Duration_descriptor_,
      Duration::internal_default_instance(),
      Duration_offsets_,
      -1,
      -1,
      -1,
      sizeof(Duration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duration, _internal_metadata_));
  RpDuration_descriptor_ = file->message_type(5);
  static const int RpDuration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpDuration, duration_),
  };
  RpDuration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpDuration_descriptor_,
      RpDuration::internal_default_instance(),
      RpDuration_offsets_,
      -1,
      -1,
      -1,
      sizeof(RpDuration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpDuration, _internal_metadata_));
  ResponseData_descriptor_ = file->message_type(6);
  static const int ResponseData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, map_db_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, rp_duration_),
  };
  ResponseData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseData_descriptor_,
      ResponseData::internal_default_instance(),
      ResponseData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, _internal_metadata_));
  Request_descriptor_ = file->message_type(7);
  static const int Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, rppoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, linkidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, rplinks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, map_db_version_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::internal_default_instance(),
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_));
  Response_descriptor_ = file->message_type(8);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, data_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::internal_default_instance(),
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_multi_5feta_5fstruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, Point::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficInfo_descriptor_, TrafficInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouteLocation_descriptor_, RouteLocation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LinkInfo_descriptor_, LinkInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Duration_descriptor_, Duration::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpDuration_descriptor_, RpDuration::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseData_descriptor_, ResponseData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, Request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, Response::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_multi_5feta_5fstruct_2eproto() {
  Point_default_instance_.Shutdown();
  delete Point_reflection_;
  TrafficInfo_default_instance_.Shutdown();
  delete TrafficInfo_reflection_;
  RouteLocation_default_instance_.Shutdown();
  delete RouteLocation_reflection_;
  LinkInfo_default_instance_.Shutdown();
  delete LinkInfo_reflection_;
  Duration_default_instance_.Shutdown();
  delete Duration_reflection_;
  RpDuration_default_instance_.Shutdown();
  delete RpDuration_reflection_;
  ResponseData_default_instance_.Shutdown();
  delete ResponseData_reflection_;
  Request_default_instance_.Shutdown();
  delete Request_reflection_;
  Response_default_instance_.Shutdown();
  delete Response_reflection_;
}

void protobuf_InitDefaults_multi_5feta_5fstruct_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Point_default_instance_.DefaultConstruct();
  TrafficInfo_default_instance_.DefaultConstruct();
  RouteLocation_default_instance_.DefaultConstruct();
  LinkInfo_default_instance_.DefaultConstruct();
  Duration_default_instance_.DefaultConstruct();
  RpDuration_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ResponseData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Request_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Response_default_instance_.DefaultConstruct();
  Point_default_instance_.get_mutable()->InitAsDefaultInstance();
  TrafficInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  RouteLocation_default_instance_.get_mutable()->InitAsDefaultInstance();
  LinkInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  Duration_default_instance_.get_mutable()->InitAsDefaultInstance();
  RpDuration_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResponseData_default_instance_.get_mutable()->InitAsDefaultInstance();
  Request_default_instance_.get_mutable()->InitAsDefaultInstance();
  Response_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_multi_5feta_5fstruct_2eproto_once_);
void protobuf_InitDefaults_multi_5feta_5fstruct_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_multi_5feta_5fstruct_2eproto_once_,
                 &protobuf_InitDefaults_multi_5feta_5fstruct_2eproto_impl);
}
void protobuf_AddDesc_multi_5feta_5fstruct_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026multi_eta_struct.proto\022\014MultiEtaInfo\"\035"
    "\n\005Point\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\":\n\013Traffic"
    "Info\022\014\n\004type\030\001 \001(\005\022\r\n\005speed\030\002 \001(\005\022\016\n\006sta"
    "tus\030\003 \001(\005\"L\n\rRouteLocation\022\017\n\007link_id\030\001 "
    "\001(\005\022*\n\ron_link_point\030\002 \001(\0132\023.MultiEtaInf"
    "o.Point\"Z\n\010LinkInfo\022\017\n\007link_id\030\001 \001(\005\022\020\n\010"
    "reversed\030\002 \001(\005\022+\n\010traffics\030\003 \003(\0132\031.Multi"
    "EtaInfo.TrafficInfo\"%\n\010Duration\022\014\n\004type\030"
    "\001 \001(\005\022\013\n\003eta\030\002 \001(\005\"6\n\nRpDuration\022(\n\010dura"
    "tion\030\001 \003(\0132\026.MultiEtaInfo.Duration\"U\n\014Re"
    "sponseData\022\026\n\016map_db_version\030\001 \001(\t\022-\n\013rp"
    "_duration\030\002 \003(\0132\030.MultiEtaInfo.RpDuratio"
    "n\"\350\001\n\007Request\022+\n\006origin\030\001 \001(\0132\033.MultiEta"
    "Info.RouteLocation\0220\n\013destination\030\002 \001(\0132"
    "\033.MultiEtaInfo.RouteLocation\022,\n\007rpPoint\030"
    "\003 \003(\0132\033.MultiEtaInfo.RouteLocation\022\017\n\007li"
    "nkIdx\030\004 \003(\005\022\'\n\007rpLinks\030\005 \003(\0132\026.MultiEtaI"
    "nfo.LinkInfo\022\026\n\016map_db_version\030\006 \001(\t\"Q\n\010"
    "Response\022\016\n\006status\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022(\n"
    "\004data\030\003 \001(\0132\032.MultiEtaInfo.ResponseDatab"
    "\006proto3", 807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "multi_eta_struct.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_multi_5feta_5fstruct_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_multi_5feta_5fstruct_2eproto_once_);
void protobuf_AddDesc_multi_5feta_5fstruct_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_multi_5feta_5fstruct_2eproto_once_,
                 &protobuf_AddDesc_multi_5feta_5fstruct_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_multi_5feta_5fstruct_2eproto {
  StaticDescriptorInitializer_multi_5feta_5fstruct_2eproto() {
    protobuf_AddDesc_multi_5feta_5fstruct_2eproto();
  }
} static_descriptor_initializer_multi_5feta_5fstruct_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiEtaInfo.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiEtaInfo.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:MultiEtaInfo.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Point> Point_default_instance_;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiEtaInfo.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiEtaInfo.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiEtaInfo.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiEtaInfo.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiEtaInfo.Point)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:MultiEtaInfo.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiEtaInfo.Point)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultiEtaInfo.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiEtaInfo.Point)
  size_t total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiEtaInfo.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiEtaInfo.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiEtaInfo.Point)
    UnsafeMergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiEtaInfo.Point)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Point::UnsafeMergeFrom(const Point& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiEtaInfo.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiEtaInfo.Point)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional double x = 1;
void Point::clear_x() {
  x_ = 0;
}
double Point::x() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Point.x)
  return x_;
}
void Point::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.Point.x)
}

// optional double y = 2;
void Point::clear_y() {
  y_ = 0;
}
double Point::y() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Point.y)
  return y_;
}
void Point::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.Point.y)
}

inline const Point* Point::internal_default_instance() {
  return &Point_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficInfo::kTypeFieldNumber;
const int TrafficInfo::kSpeedFieldNumber;
const int TrafficInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficInfo::TrafficInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiEtaInfo.TrafficInfo)
}

void TrafficInfo::InitAsDefaultInstance() {
}

TrafficInfo::TrafficInfo(const TrafficInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiEtaInfo.TrafficInfo)
}

void TrafficInfo::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_) + sizeof(status_));
  _cached_size_ = 0;
}

TrafficInfo::~TrafficInfo() {
  // @@protoc_insertion_point(destructor:MultiEtaInfo.TrafficInfo)
  SharedDtor();
}

void TrafficInfo::SharedDtor() {
}

void TrafficInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficInfo_descriptor_;
}

const TrafficInfo& TrafficInfo::default_instance() {
  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TrafficInfo> TrafficInfo_default_instance_;

TrafficInfo* TrafficInfo::New(::google::protobuf::Arena* arena) const {
  TrafficInfo* n = new TrafficInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiEtaInfo.TrafficInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrafficInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrafficInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool TrafficInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiEtaInfo.TrafficInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_speed;
        break;
      }

      // optional int32 speed = 2;
      case 2: {
        if (tag == 16) {
         parse_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiEtaInfo.TrafficInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiEtaInfo.TrafficInfo)
  return false;
#undef DO_
}

void TrafficInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiEtaInfo.TrafficInfo)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 speed = 2;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->speed(), output);
  }

  // optional int32 status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:MultiEtaInfo.TrafficInfo)
}

::google::protobuf::uint8* TrafficInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiEtaInfo.TrafficInfo)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 speed = 2;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->speed(), target);
  }

  // optional int32 status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultiEtaInfo.TrafficInfo)
  return target;
}

size_t TrafficInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiEtaInfo.TrafficInfo)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 speed = 2;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // optional int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiEtaInfo.TrafficInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrafficInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiEtaInfo.TrafficInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiEtaInfo.TrafficInfo)
    UnsafeMergeFrom(*source);
  }
}

void TrafficInfo::MergeFrom(const TrafficInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiEtaInfo.TrafficInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TrafficInfo::UnsafeMergeFrom(const TrafficInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TrafficInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiEtaInfo.TrafficInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficInfo::CopyFrom(const TrafficInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiEtaInfo.TrafficInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TrafficInfo::IsInitialized() const {

  return true;
}

void TrafficInfo::Swap(TrafficInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficInfo::InternalSwap(TrafficInfo* other) {
  std::swap(type_, other->type_);
  std::swap(speed_, other->speed_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficInfo_descriptor_;
  metadata.reflection = TrafficInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficInfo

// optional int32 type = 1;
void TrafficInfo::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 TrafficInfo::type() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.TrafficInfo.type)
  return type_;
}
void TrafficInfo::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.TrafficInfo.type)
}

// optional int32 speed = 2;
void TrafficInfo::clear_speed() {
  speed_ = 0;
}
::google::protobuf::int32 TrafficInfo::speed() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.TrafficInfo.speed)
  return speed_;
}
void TrafficInfo::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.TrafficInfo.speed)
}

// optional int32 status = 3;
void TrafficInfo::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 TrafficInfo::status() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.TrafficInfo.status)
  return status_;
}
void TrafficInfo::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.TrafficInfo.status)
}

inline const TrafficInfo* TrafficInfo::internal_default_instance() {
  return &TrafficInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteLocation::kLinkIdFieldNumber;
const int RouteLocation::kOnLinkPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteLocation::RouteLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiEtaInfo.RouteLocation)
}

void RouteLocation::InitAsDefaultInstance() {
  on_link_point_ = const_cast< ::MultiEtaInfo::Point*>(
      ::MultiEtaInfo::Point::internal_default_instance());
}

RouteLocation::RouteLocation(const RouteLocation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiEtaInfo.RouteLocation)
}

void RouteLocation::SharedCtor() {
  on_link_point_ = NULL;
  link_id_ = 0;
  _cached_size_ = 0;
}

RouteLocation::~RouteLocation() {
  // @@protoc_insertion_point(destructor:MultiEtaInfo.RouteLocation)
  SharedDtor();
}

void RouteLocation::SharedDtor() {
  if (this != &RouteLocation_default_instance_.get()) {
    delete on_link_point_;
  }
}

void RouteLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteLocation_descriptor_;
}

const RouteLocation& RouteLocation::default_instance() {
  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RouteLocation> RouteLocation_default_instance_;

RouteLocation* RouteLocation::New(::google::protobuf::Arena* arena) const {
  RouteLocation* n = new RouteLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiEtaInfo.RouteLocation)
  link_id_ = 0;
  if (GetArenaNoVirtual() == NULL && on_link_point_ != NULL) delete on_link_point_;
  on_link_point_ = NULL;
}

bool RouteLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiEtaInfo.RouteLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 link_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_on_link_point;
        break;
      }

      // optional .MultiEtaInfo.Point on_link_point = 2;
      case 2: {
        if (tag == 18) {
         parse_on_link_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_link_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiEtaInfo.RouteLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiEtaInfo.RouteLocation)
  return false;
#undef DO_
}

void RouteLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiEtaInfo.RouteLocation)
  // optional int32 link_id = 1;
  if (this->link_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->link_id(), output);
  }

  // optional .MultiEtaInfo.Point on_link_point = 2;
  if (this->has_on_link_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->on_link_point_, output);
  }

  // @@protoc_insertion_point(serialize_end:MultiEtaInfo.RouteLocation)
}

::google::protobuf::uint8* RouteLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiEtaInfo.RouteLocation)
  // optional int32 link_id = 1;
  if (this->link_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->link_id(), target);
  }

  // optional .MultiEtaInfo.Point on_link_point = 2;
  if (this->has_on_link_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->on_link_point_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultiEtaInfo.RouteLocation)
  return target;
}

size_t RouteLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiEtaInfo.RouteLocation)
  size_t total_size = 0;

  // optional int32 link_id = 1;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_id());
  }

  // optional .MultiEtaInfo.Point on_link_point = 2;
  if (this->has_on_link_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->on_link_point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiEtaInfo.RouteLocation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RouteLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiEtaInfo.RouteLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiEtaInfo.RouteLocation)
    UnsafeMergeFrom(*source);
  }
}

void RouteLocation::MergeFrom(const RouteLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiEtaInfo.RouteLocation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RouteLocation::UnsafeMergeFrom(const RouteLocation& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.link_id() != 0) {
    set_link_id(from.link_id());
  }
  if (from.has_on_link_point()) {
    mutable_on_link_point()->::MultiEtaInfo::Point::MergeFrom(from.on_link_point());
  }
}

void RouteLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiEtaInfo.RouteLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteLocation::CopyFrom(const RouteLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiEtaInfo.RouteLocation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RouteLocation::IsInitialized() const {

  return true;
}

void RouteLocation::Swap(RouteLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteLocation::InternalSwap(RouteLocation* other) {
  std::swap(link_id_, other->link_id_);
  std::swap(on_link_point_, other->on_link_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteLocation_descriptor_;
  metadata.reflection = RouteLocation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteLocation

// optional int32 link_id = 1;
void RouteLocation::clear_link_id() {
  link_id_ = 0;
}
::google::protobuf::int32 RouteLocation::link_id() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.RouteLocation.link_id)
  return link_id_;
}
void RouteLocation::set_link_id(::google::protobuf::int32 value) {
  
  link_id_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.RouteLocation.link_id)
}

// optional .MultiEtaInfo.Point on_link_point = 2;
bool RouteLocation::has_on_link_point() const {
  return this != internal_default_instance() && on_link_point_ != NULL;
}
void RouteLocation::clear_on_link_point() {
  if (GetArenaNoVirtual() == NULL && on_link_point_ != NULL) delete on_link_point_;
  on_link_point_ = NULL;
}
const ::MultiEtaInfo::Point& RouteLocation::on_link_point() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.RouteLocation.on_link_point)
  return on_link_point_ != NULL ? *on_link_point_
                         : *::MultiEtaInfo::Point::internal_default_instance();
}
::MultiEtaInfo::Point* RouteLocation::mutable_on_link_point() {
  
  if (on_link_point_ == NULL) {
    on_link_point_ = new ::MultiEtaInfo::Point;
  }
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.RouteLocation.on_link_point)
  return on_link_point_;
}
::MultiEtaInfo::Point* RouteLocation::release_on_link_point() {
  // @@protoc_insertion_point(field_release:MultiEtaInfo.RouteLocation.on_link_point)
  
  ::MultiEtaInfo::Point* temp = on_link_point_;
  on_link_point_ = NULL;
  return temp;
}
void RouteLocation::set_allocated_on_link_point(::MultiEtaInfo::Point* on_link_point) {
  delete on_link_point_;
  on_link_point_ = on_link_point;
  if (on_link_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MultiEtaInfo.RouteLocation.on_link_point)
}

inline const RouteLocation* RouteLocation::internal_default_instance() {
  return &RouteLocation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkInfo::kLinkIdFieldNumber;
const int LinkInfo::kReversedFieldNumber;
const int LinkInfo::kTrafficsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkInfo::LinkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiEtaInfo.LinkInfo)
}

void LinkInfo::InitAsDefaultInstance() {
}

LinkInfo::LinkInfo(const LinkInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiEtaInfo.LinkInfo)
}

void LinkInfo::SharedCtor() {
  ::memset(&link_id_, 0, reinterpret_cast<char*>(&reversed_) -
    reinterpret_cast<char*>(&link_id_) + sizeof(reversed_));
  _cached_size_ = 0;
}

LinkInfo::~LinkInfo() {
  // @@protoc_insertion_point(destructor:MultiEtaInfo.LinkInfo)
  SharedDtor();
}

void LinkInfo::SharedDtor() {
}

void LinkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkInfo_descriptor_;
}

const LinkInfo& LinkInfo::default_instance() {
  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LinkInfo> LinkInfo_default_instance_;

LinkInfo* LinkInfo::New(::google::protobuf::Arena* arena) const {
  LinkInfo* n = new LinkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiEtaInfo.LinkInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LinkInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LinkInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(link_id_, reversed_);

#undef ZR_HELPER_
#undef ZR_

  traffics_.Clear();
}

bool LinkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiEtaInfo.LinkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 link_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reversed;
        break;
      }

      // optional int32 reversed = 2;
      case 2: {
        if (tag == 16) {
         parse_reversed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reversed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_traffics;
        break;
      }

      // repeated .MultiEtaInfo.TrafficInfo traffics = 3;
      case 3: {
        if (tag == 26) {
         parse_traffics:
          DO_(input->IncrementRecursionDepth());
         parse_loop_traffics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traffics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_traffics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiEtaInfo.LinkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiEtaInfo.LinkInfo)
  return false;
#undef DO_
}

void LinkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiEtaInfo.LinkInfo)
  // optional int32 link_id = 1;
  if (this->link_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->link_id(), output);
  }

  // optional int32 reversed = 2;
  if (this->reversed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reversed(), output);
  }

  // repeated .MultiEtaInfo.TrafficInfo traffics = 3;
  for (unsigned int i = 0, n = this->traffics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->traffics(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MultiEtaInfo.LinkInfo)
}

::google::protobuf::uint8* LinkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiEtaInfo.LinkInfo)
  // optional int32 link_id = 1;
  if (this->link_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->link_id(), target);
  }

  // optional int32 reversed = 2;
  if (this->reversed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reversed(), target);
  }

  // repeated .MultiEtaInfo.TrafficInfo traffics = 3;
  for (unsigned int i = 0, n = this->traffics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->traffics(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultiEtaInfo.LinkInfo)
  return target;
}

size_t LinkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiEtaInfo.LinkInfo)
  size_t total_size = 0;

  // optional int32 link_id = 1;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_id());
  }

  // optional int32 reversed = 2;
  if (this->reversed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reversed());
  }

  // repeated .MultiEtaInfo.TrafficInfo traffics = 3;
  {
    unsigned int count = this->traffics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffics(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiEtaInfo.LinkInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LinkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiEtaInfo.LinkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiEtaInfo.LinkInfo)
    UnsafeMergeFrom(*source);
  }
}

void LinkInfo::MergeFrom(const LinkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiEtaInfo.LinkInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LinkInfo::UnsafeMergeFrom(const LinkInfo& from) {
  GOOGLE_DCHECK(&from != this);
  traffics_.MergeFrom(from.traffics_);
  if (from.link_id() != 0) {
    set_link_id(from.link_id());
  }
  if (from.reversed() != 0) {
    set_reversed(from.reversed());
  }
}

void LinkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiEtaInfo.LinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkInfo::CopyFrom(const LinkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiEtaInfo.LinkInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LinkInfo::IsInitialized() const {

  return true;
}

void LinkInfo::Swap(LinkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkInfo::InternalSwap(LinkInfo* other) {
  std::swap(link_id_, other->link_id_);
  std::swap(reversed_, other->reversed_);
  traffics_.UnsafeArenaSwap(&other->traffics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkInfo_descriptor_;
  metadata.reflection = LinkInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkInfo

// optional int32 link_id = 1;
void LinkInfo::clear_link_id() {
  link_id_ = 0;
}
::google::protobuf::int32 LinkInfo::link_id() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.LinkInfo.link_id)
  return link_id_;
}
void LinkInfo::set_link_id(::google::protobuf::int32 value) {
  
  link_id_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.LinkInfo.link_id)
}

// optional int32 reversed = 2;
void LinkInfo::clear_reversed() {
  reversed_ = 0;
}
::google::protobuf::int32 LinkInfo::reversed() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.LinkInfo.reversed)
  return reversed_;
}
void LinkInfo::set_reversed(::google::protobuf::int32 value) {
  
  reversed_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.LinkInfo.reversed)
}

// repeated .MultiEtaInfo.TrafficInfo traffics = 3;
int LinkInfo::traffics_size() const {
  return traffics_.size();
}
void LinkInfo::clear_traffics() {
  traffics_.Clear();
}
const ::MultiEtaInfo::TrafficInfo& LinkInfo::traffics(int index) const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.LinkInfo.traffics)
  return traffics_.Get(index);
}
::MultiEtaInfo::TrafficInfo* LinkInfo::mutable_traffics(int index) {
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.LinkInfo.traffics)
  return traffics_.Mutable(index);
}
::MultiEtaInfo::TrafficInfo* LinkInfo::add_traffics() {
  // @@protoc_insertion_point(field_add:MultiEtaInfo.LinkInfo.traffics)
  return traffics_.Add();
}
::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::TrafficInfo >*
LinkInfo::mutable_traffics() {
  // @@protoc_insertion_point(field_mutable_list:MultiEtaInfo.LinkInfo.traffics)
  return &traffics_;
}
const ::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::TrafficInfo >&
LinkInfo::traffics() const {
  // @@protoc_insertion_point(field_list:MultiEtaInfo.LinkInfo.traffics)
  return traffics_;
}

inline const LinkInfo* LinkInfo::internal_default_instance() {
  return &LinkInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Duration::kTypeFieldNumber;
const int Duration::kEtaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Duration::Duration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiEtaInfo.Duration)
}

void Duration::InitAsDefaultInstance() {
}

Duration::Duration(const Duration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiEtaInfo.Duration)
}

void Duration::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&eta_) -
    reinterpret_cast<char*>(&type_) + sizeof(eta_));
  _cached_size_ = 0;
}

Duration::~Duration() {
  // @@protoc_insertion_point(destructor:MultiEtaInfo.Duration)
  SharedDtor();
}

void Duration::SharedDtor() {
}

void Duration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duration_descriptor_;
}

const Duration& Duration::default_instance() {
  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Duration> Duration_default_instance_;

Duration* Duration::New(::google::protobuf::Arena* arena) const {
  Duration* n = new Duration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Duration::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiEtaInfo.Duration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Duration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Duration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, eta_);

#undef ZR_HELPER_
#undef ZR_

}

bool Duration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiEtaInfo.Duration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eta;
        break;
      }

      // optional int32 eta = 2;
      case 2: {
        if (tag == 16) {
         parse_eta:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eta_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiEtaInfo.Duration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiEtaInfo.Duration)
  return false;
#undef DO_
}

void Duration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiEtaInfo.Duration)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 eta = 2;
  if (this->eta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eta(), output);
  }

  // @@protoc_insertion_point(serialize_end:MultiEtaInfo.Duration)
}

::google::protobuf::uint8* Duration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiEtaInfo.Duration)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 eta = 2;
  if (this->eta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultiEtaInfo.Duration)
  return target;
}

size_t Duration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiEtaInfo.Duration)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 eta = 2;
  if (this->eta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eta());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiEtaInfo.Duration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Duration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Duration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiEtaInfo.Duration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiEtaInfo.Duration)
    UnsafeMergeFrom(*source);
  }
}

void Duration::MergeFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiEtaInfo.Duration)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Duration::UnsafeMergeFrom(const Duration& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.eta() != 0) {
    set_eta(from.eta());
  }
}

void Duration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiEtaInfo.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duration::CopyFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiEtaInfo.Duration)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Duration::IsInitialized() const {

  return true;
}

void Duration::Swap(Duration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Duration::InternalSwap(Duration* other) {
  std::swap(type_, other->type_);
  std::swap(eta_, other->eta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Duration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duration_descriptor_;
  metadata.reflection = Duration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Duration

// optional int32 type = 1;
void Duration::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 Duration::type() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Duration.type)
  return type_;
}
void Duration::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.Duration.type)
}

// optional int32 eta = 2;
void Duration::clear_eta() {
  eta_ = 0;
}
::google::protobuf::int32 Duration::eta() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Duration.eta)
  return eta_;
}
void Duration::set_eta(::google::protobuf::int32 value) {
  
  eta_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.Duration.eta)
}

inline const Duration* Duration::internal_default_instance() {
  return &Duration_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpDuration::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpDuration::RpDuration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiEtaInfo.RpDuration)
}

void RpDuration::InitAsDefaultInstance() {
}

RpDuration::RpDuration(const RpDuration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiEtaInfo.RpDuration)
}

void RpDuration::SharedCtor() {
  _cached_size_ = 0;
}

RpDuration::~RpDuration() {
  // @@protoc_insertion_point(destructor:MultiEtaInfo.RpDuration)
  SharedDtor();
}

void RpDuration::SharedDtor() {
}

void RpDuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpDuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpDuration_descriptor_;
}

const RpDuration& RpDuration::default_instance() {
  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RpDuration> RpDuration_default_instance_;

RpDuration* RpDuration::New(::google::protobuf::Arena* arena) const {
  RpDuration* n = new RpDuration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpDuration::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiEtaInfo.RpDuration)
  duration_.Clear();
}

bool RpDuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiEtaInfo.RpDuration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MultiEtaInfo.Duration duration = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_duration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_duration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_duration;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiEtaInfo.RpDuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiEtaInfo.RpDuration)
  return false;
#undef DO_
}

void RpDuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiEtaInfo.RpDuration)
  // repeated .MultiEtaInfo.Duration duration = 1;
  for (unsigned int i = 0, n = this->duration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duration(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MultiEtaInfo.RpDuration)
}

::google::protobuf::uint8* RpDuration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiEtaInfo.RpDuration)
  // repeated .MultiEtaInfo.Duration duration = 1;
  for (unsigned int i = 0, n = this->duration_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->duration(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultiEtaInfo.RpDuration)
  return target;
}

size_t RpDuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiEtaInfo.RpDuration)
  size_t total_size = 0;

  // repeated .MultiEtaInfo.Duration duration = 1;
  {
    unsigned int count = this->duration_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duration(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpDuration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiEtaInfo.RpDuration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RpDuration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpDuration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiEtaInfo.RpDuration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiEtaInfo.RpDuration)
    UnsafeMergeFrom(*source);
  }
}

void RpDuration::MergeFrom(const RpDuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiEtaInfo.RpDuration)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RpDuration::UnsafeMergeFrom(const RpDuration& from) {
  GOOGLE_DCHECK(&from != this);
  duration_.MergeFrom(from.duration_);
}

void RpDuration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiEtaInfo.RpDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpDuration::CopyFrom(const RpDuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiEtaInfo.RpDuration)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RpDuration::IsInitialized() const {

  return true;
}

void RpDuration::Swap(RpDuration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpDuration::InternalSwap(RpDuration* other) {
  duration_.UnsafeArenaSwap(&other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpDuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpDuration_descriptor_;
  metadata.reflection = RpDuration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpDuration

// repeated .MultiEtaInfo.Duration duration = 1;
int RpDuration::duration_size() const {
  return duration_.size();
}
void RpDuration::clear_duration() {
  duration_.Clear();
}
const ::MultiEtaInfo::Duration& RpDuration::duration(int index) const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.RpDuration.duration)
  return duration_.Get(index);
}
::MultiEtaInfo::Duration* RpDuration::mutable_duration(int index) {
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.RpDuration.duration)
  return duration_.Mutable(index);
}
::MultiEtaInfo::Duration* RpDuration::add_duration() {
  // @@protoc_insertion_point(field_add:MultiEtaInfo.RpDuration.duration)
  return duration_.Add();
}
::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::Duration >*
RpDuration::mutable_duration() {
  // @@protoc_insertion_point(field_mutable_list:MultiEtaInfo.RpDuration.duration)
  return &duration_;
}
const ::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::Duration >&
RpDuration::duration() const {
  // @@protoc_insertion_point(field_list:MultiEtaInfo.RpDuration.duration)
  return duration_;
}

inline const RpDuration* RpDuration::internal_default_instance() {
  return &RpDuration_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseData::kMapDbVersionFieldNumber;
const int ResponseData::kRpDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseData::ResponseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiEtaInfo.ResponseData)
}

void ResponseData::InitAsDefaultInstance() {
}

ResponseData::ResponseData(const ResponseData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiEtaInfo.ResponseData)
}

void ResponseData::SharedCtor() {
  map_db_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResponseData::~ResponseData() {
  // @@protoc_insertion_point(destructor:MultiEtaInfo.ResponseData)
  SharedDtor();
}

void ResponseData::SharedDtor() {
  map_db_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseData_descriptor_;
}

const ResponseData& ResponseData::default_instance() {
  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResponseData> ResponseData_default_instance_;

ResponseData* ResponseData::New(::google::protobuf::Arena* arena) const {
  ResponseData* n = new ResponseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiEtaInfo.ResponseData)
  map_db_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rp_duration_.Clear();
}

bool ResponseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiEtaInfo.ResponseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_db_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_db_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_db_version().data(), this->map_db_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MultiEtaInfo.ResponseData.map_db_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rp_duration;
        break;
      }

      // repeated .MultiEtaInfo.RpDuration rp_duration = 2;
      case 2: {
        if (tag == 18) {
         parse_rp_duration:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rp_duration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rp_duration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_rp_duration;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiEtaInfo.ResponseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiEtaInfo.ResponseData)
  return false;
#undef DO_
}

void ResponseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiEtaInfo.ResponseData)
  // optional string map_db_version = 1;
  if (this->map_db_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_db_version().data(), this->map_db_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MultiEtaInfo.ResponseData.map_db_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_db_version(), output);
  }

  // repeated .MultiEtaInfo.RpDuration rp_duration = 2;
  for (unsigned int i = 0, n = this->rp_duration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rp_duration(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MultiEtaInfo.ResponseData)
}

::google::protobuf::uint8* ResponseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiEtaInfo.ResponseData)
  // optional string map_db_version = 1;
  if (this->map_db_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_db_version().data(), this->map_db_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MultiEtaInfo.ResponseData.map_db_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_db_version(), target);
  }

  // repeated .MultiEtaInfo.RpDuration rp_duration = 2;
  for (unsigned int i = 0, n = this->rp_duration_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->rp_duration(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultiEtaInfo.ResponseData)
  return target;
}

size_t ResponseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiEtaInfo.ResponseData)
  size_t total_size = 0;

  // optional string map_db_version = 1;
  if (this->map_db_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_db_version());
  }

  // repeated .MultiEtaInfo.RpDuration rp_duration = 2;
  {
    unsigned int count = this->rp_duration_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rp_duration(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiEtaInfo.ResponseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResponseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiEtaInfo.ResponseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiEtaInfo.ResponseData)
    UnsafeMergeFrom(*source);
  }
}

void ResponseData::MergeFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiEtaInfo.ResponseData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResponseData::UnsafeMergeFrom(const ResponseData& from) {
  GOOGLE_DCHECK(&from != this);
  rp_duration_.MergeFrom(from.rp_duration_);
  if (from.map_db_version().size() > 0) {

    map_db_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_db_version_);
  }
}

void ResponseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiEtaInfo.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseData::CopyFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiEtaInfo.ResponseData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResponseData::IsInitialized() const {

  return true;
}

void ResponseData::Swap(ResponseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseData::InternalSwap(ResponseData* other) {
  map_db_version_.Swap(&other->map_db_version_);
  rp_duration_.UnsafeArenaSwap(&other->rp_duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseData_descriptor_;
  metadata.reflection = ResponseData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseData

// optional string map_db_version = 1;
void ResponseData::clear_map_db_version() {
  map_db_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseData::map_db_version() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.ResponseData.map_db_version)
  return map_db_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseData::set_map_db_version(const ::std::string& value) {
  
  map_db_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MultiEtaInfo.ResponseData.map_db_version)
}
void ResponseData::set_map_db_version(const char* value) {
  
  map_db_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MultiEtaInfo.ResponseData.map_db_version)
}
void ResponseData::set_map_db_version(const char* value, size_t size) {
  
  map_db_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MultiEtaInfo.ResponseData.map_db_version)
}
::std::string* ResponseData::mutable_map_db_version() {
  
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.ResponseData.map_db_version)
  return map_db_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseData::release_map_db_version() {
  // @@protoc_insertion_point(field_release:MultiEtaInfo.ResponseData.map_db_version)
  
  return map_db_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseData::set_allocated_map_db_version(::std::string* map_db_version) {
  if (map_db_version != NULL) {
    
  } else {
    
  }
  map_db_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_db_version);
  // @@protoc_insertion_point(field_set_allocated:MultiEtaInfo.ResponseData.map_db_version)
}

// repeated .MultiEtaInfo.RpDuration rp_duration = 2;
int ResponseData::rp_duration_size() const {
  return rp_duration_.size();
}
void ResponseData::clear_rp_duration() {
  rp_duration_.Clear();
}
const ::MultiEtaInfo::RpDuration& ResponseData::rp_duration(int index) const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.ResponseData.rp_duration)
  return rp_duration_.Get(index);
}
::MultiEtaInfo::RpDuration* ResponseData::mutable_rp_duration(int index) {
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.ResponseData.rp_duration)
  return rp_duration_.Mutable(index);
}
::MultiEtaInfo::RpDuration* ResponseData::add_rp_duration() {
  // @@protoc_insertion_point(field_add:MultiEtaInfo.ResponseData.rp_duration)
  return rp_duration_.Add();
}
::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::RpDuration >*
ResponseData::mutable_rp_duration() {
  // @@protoc_insertion_point(field_mutable_list:MultiEtaInfo.ResponseData.rp_duration)
  return &rp_duration_;
}
const ::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::RpDuration >&
ResponseData::rp_duration() const {
  // @@protoc_insertion_point(field_list:MultiEtaInfo.ResponseData.rp_duration)
  return rp_duration_;
}

inline const ResponseData* ResponseData::internal_default_instance() {
  return &ResponseData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kOriginFieldNumber;
const int Request::kDestinationFieldNumber;
const int Request::kRpPointFieldNumber;
const int Request::kLinkIdxFieldNumber;
const int Request::kRpLinksFieldNumber;
const int Request::kMapDbVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiEtaInfo.Request)
}

void Request::InitAsDefaultInstance() {
  origin_ = const_cast< ::MultiEtaInfo::RouteLocation*>(
      ::MultiEtaInfo::RouteLocation::internal_default_instance());
  destination_ = const_cast< ::MultiEtaInfo::RouteLocation*>(
      ::MultiEtaInfo::RouteLocation::internal_default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiEtaInfo.Request)
}

void Request::SharedCtor() {
  map_db_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_ = NULL;
  destination_ = NULL;
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:MultiEtaInfo.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  map_db_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Request_default_instance_.get()) {
    delete origin_;
    delete destination_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request> Request_default_instance_;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiEtaInfo.Request)
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) delete destination_;
  destination_ = NULL;
  map_db_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rppoint_.Clear();
  linkidx_.Clear();
  rplinks_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiEtaInfo.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MultiEtaInfo.RouteLocation origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_destination;
        break;
      }

      // optional .MultiEtaInfo.RouteLocation destination = 2;
      case 2: {
        if (tag == 18) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rpPoint;
        break;
      }

      // repeated .MultiEtaInfo.RouteLocation rpPoint = 3;
      case 3: {
        if (tag == 26) {
         parse_rpPoint:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rpPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rppoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_rpPoint;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_linkIdx;
        break;
      }

      // repeated int32 linkIdx = 4;
      case 4: {
        if (tag == 34) {
         parse_linkIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_linkidx())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_linkidx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rpLinks;
        break;
      }

      // repeated .MultiEtaInfo.LinkInfo rpLinks = 5;
      case 5: {
        if (tag == 42) {
         parse_rpLinks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rpLinks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rplinks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_rpLinks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_map_db_version;
        break;
      }

      // optional string map_db_version = 6;
      case 6: {
        if (tag == 50) {
         parse_map_db_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_db_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_db_version().data(), this->map_db_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MultiEtaInfo.Request.map_db_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiEtaInfo.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiEtaInfo.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiEtaInfo.Request)
  // optional .MultiEtaInfo.RouteLocation origin = 1;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .MultiEtaInfo.RouteLocation destination = 2;
  if (this->has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_, output);
  }

  // repeated .MultiEtaInfo.RouteLocation rpPoint = 3;
  for (unsigned int i = 0, n = this->rppoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rppoint(i), output);
  }

  // repeated int32 linkIdx = 4;
  if (this->linkidx_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_linkidx_cached_byte_size_);
  }
  for (int i = 0; i < this->linkidx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->linkidx(i), output);
  }

  // repeated .MultiEtaInfo.LinkInfo rpLinks = 5;
  for (unsigned int i = 0, n = this->rplinks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rplinks(i), output);
  }

  // optional string map_db_version = 6;
  if (this->map_db_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_db_version().data(), this->map_db_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MultiEtaInfo.Request.map_db_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->map_db_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:MultiEtaInfo.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiEtaInfo.Request)
  // optional .MultiEtaInfo.RouteLocation origin = 1;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, false, target);
  }

  // optional .MultiEtaInfo.RouteLocation destination = 2;
  if (this->has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->destination_, false, target);
  }

  // repeated .MultiEtaInfo.RouteLocation rpPoint = 3;
  for (unsigned int i = 0, n = this->rppoint_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->rppoint(i), false, target);
  }

  // repeated int32 linkIdx = 4;
  if (this->linkidx_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _linkidx_cached_byte_size_, target);
  }
  for (int i = 0; i < this->linkidx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->linkidx(i), target);
  }

  // repeated .MultiEtaInfo.LinkInfo rpLinks = 5;
  for (unsigned int i = 0, n = this->rplinks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->rplinks(i), false, target);
  }

  // optional string map_db_version = 6;
  if (this->map_db_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_db_version().data(), this->map_db_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MultiEtaInfo.Request.map_db_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->map_db_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultiEtaInfo.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiEtaInfo.Request)
  size_t total_size = 0;

  // optional .MultiEtaInfo.RouteLocation origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->origin_);
  }

  // optional .MultiEtaInfo.RouteLocation destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->destination_);
  }

  // optional string map_db_version = 6;
  if (this->map_db_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_db_version());
  }

  // repeated .MultiEtaInfo.RouteLocation rpPoint = 3;
  {
    unsigned int count = this->rppoint_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rppoint(i));
    }
  }

  // repeated int32 linkIdx = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->linkidx_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->linkidx(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linkidx_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .MultiEtaInfo.LinkInfo rpLinks = 5;
  {
    unsigned int count = this->rplinks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rplinks(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiEtaInfo.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiEtaInfo.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiEtaInfo.Request)
    UnsafeMergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiEtaInfo.Request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request::UnsafeMergeFrom(const Request& from) {
  GOOGLE_DCHECK(&from != this);
  rppoint_.MergeFrom(from.rppoint_);
  linkidx_.UnsafeMergeFrom(from.linkidx_);
  rplinks_.MergeFrom(from.rplinks_);
  if (from.has_origin()) {
    mutable_origin()->::MultiEtaInfo::RouteLocation::MergeFrom(from.origin());
  }
  if (from.has_destination()) {
    mutable_destination()->::MultiEtaInfo::RouteLocation::MergeFrom(from.destination());
  }
  if (from.map_db_version().size() > 0) {

    map_db_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_db_version_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiEtaInfo.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiEtaInfo.Request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(origin_, other->origin_);
  std::swap(destination_, other->destination_);
  rppoint_.UnsafeArenaSwap(&other->rppoint_);
  linkidx_.UnsafeArenaSwap(&other->linkidx_);
  rplinks_.UnsafeArenaSwap(&other->rplinks_);
  map_db_version_.Swap(&other->map_db_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .MultiEtaInfo.RouteLocation origin = 1;
bool Request::has_origin() const {
  return this != internal_default_instance() && origin_ != NULL;
}
void Request::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
}
const ::MultiEtaInfo::RouteLocation& Request::origin() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Request.origin)
  return origin_ != NULL ? *origin_
                         : *::MultiEtaInfo::RouteLocation::internal_default_instance();
}
::MultiEtaInfo::RouteLocation* Request::mutable_origin() {
  
  if (origin_ == NULL) {
    origin_ = new ::MultiEtaInfo::RouteLocation;
  }
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.Request.origin)
  return origin_;
}
::MultiEtaInfo::RouteLocation* Request::release_origin() {
  // @@protoc_insertion_point(field_release:MultiEtaInfo.Request.origin)
  
  ::MultiEtaInfo::RouteLocation* temp = origin_;
  origin_ = NULL;
  return temp;
}
void Request::set_allocated_origin(::MultiEtaInfo::RouteLocation* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MultiEtaInfo.Request.origin)
}

// optional .MultiEtaInfo.RouteLocation destination = 2;
bool Request::has_destination() const {
  return this != internal_default_instance() && destination_ != NULL;
}
void Request::clear_destination() {
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) delete destination_;
  destination_ = NULL;
}
const ::MultiEtaInfo::RouteLocation& Request::destination() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Request.destination)
  return destination_ != NULL ? *destination_
                         : *::MultiEtaInfo::RouteLocation::internal_default_instance();
}
::MultiEtaInfo::RouteLocation* Request::mutable_destination() {
  
  if (destination_ == NULL) {
    destination_ = new ::MultiEtaInfo::RouteLocation;
  }
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.Request.destination)
  return destination_;
}
::MultiEtaInfo::RouteLocation* Request::release_destination() {
  // @@protoc_insertion_point(field_release:MultiEtaInfo.Request.destination)
  
  ::MultiEtaInfo::RouteLocation* temp = destination_;
  destination_ = NULL;
  return temp;
}
void Request::set_allocated_destination(::MultiEtaInfo::RouteLocation* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MultiEtaInfo.Request.destination)
}

// repeated .MultiEtaInfo.RouteLocation rpPoint = 3;
int Request::rppoint_size() const {
  return rppoint_.size();
}
void Request::clear_rppoint() {
  rppoint_.Clear();
}
const ::MultiEtaInfo::RouteLocation& Request::rppoint(int index) const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Request.rpPoint)
  return rppoint_.Get(index);
}
::MultiEtaInfo::RouteLocation* Request::mutable_rppoint(int index) {
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.Request.rpPoint)
  return rppoint_.Mutable(index);
}
::MultiEtaInfo::RouteLocation* Request::add_rppoint() {
  // @@protoc_insertion_point(field_add:MultiEtaInfo.Request.rpPoint)
  return rppoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::RouteLocation >*
Request::mutable_rppoint() {
  // @@protoc_insertion_point(field_mutable_list:MultiEtaInfo.Request.rpPoint)
  return &rppoint_;
}
const ::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::RouteLocation >&
Request::rppoint() const {
  // @@protoc_insertion_point(field_list:MultiEtaInfo.Request.rpPoint)
  return rppoint_;
}

// repeated int32 linkIdx = 4;
int Request::linkidx_size() const {
  return linkidx_.size();
}
void Request::clear_linkidx() {
  linkidx_.Clear();
}
::google::protobuf::int32 Request::linkidx(int index) const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Request.linkIdx)
  return linkidx_.Get(index);
}
void Request::set_linkidx(int index, ::google::protobuf::int32 value) {
  linkidx_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultiEtaInfo.Request.linkIdx)
}
void Request::add_linkidx(::google::protobuf::int32 value) {
  linkidx_.Add(value);
  // @@protoc_insertion_point(field_add:MultiEtaInfo.Request.linkIdx)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Request::linkidx() const {
  // @@protoc_insertion_point(field_list:MultiEtaInfo.Request.linkIdx)
  return linkidx_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Request::mutable_linkidx() {
  // @@protoc_insertion_point(field_mutable_list:MultiEtaInfo.Request.linkIdx)
  return &linkidx_;
}

// repeated .MultiEtaInfo.LinkInfo rpLinks = 5;
int Request::rplinks_size() const {
  return rplinks_.size();
}
void Request::clear_rplinks() {
  rplinks_.Clear();
}
const ::MultiEtaInfo::LinkInfo& Request::rplinks(int index) const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Request.rpLinks)
  return rplinks_.Get(index);
}
::MultiEtaInfo::LinkInfo* Request::mutable_rplinks(int index) {
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.Request.rpLinks)
  return rplinks_.Mutable(index);
}
::MultiEtaInfo::LinkInfo* Request::add_rplinks() {
  // @@protoc_insertion_point(field_add:MultiEtaInfo.Request.rpLinks)
  return rplinks_.Add();
}
::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::LinkInfo >*
Request::mutable_rplinks() {
  // @@protoc_insertion_point(field_mutable_list:MultiEtaInfo.Request.rpLinks)
  return &rplinks_;
}
const ::google::protobuf::RepeatedPtrField< ::MultiEtaInfo::LinkInfo >&
Request::rplinks() const {
  // @@protoc_insertion_point(field_list:MultiEtaInfo.Request.rpLinks)
  return rplinks_;
}

// optional string map_db_version = 6;
void Request::clear_map_db_version() {
  map_db_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request::map_db_version() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Request.map_db_version)
  return map_db_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_map_db_version(const ::std::string& value) {
  
  map_db_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MultiEtaInfo.Request.map_db_version)
}
void Request::set_map_db_version(const char* value) {
  
  map_db_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MultiEtaInfo.Request.map_db_version)
}
void Request::set_map_db_version(const char* value, size_t size) {
  
  map_db_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MultiEtaInfo.Request.map_db_version)
}
::std::string* Request::mutable_map_db_version() {
  
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.Request.map_db_version)
  return map_db_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_map_db_version() {
  // @@protoc_insertion_point(field_release:MultiEtaInfo.Request.map_db_version)
  
  return map_db_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_map_db_version(::std::string* map_db_version) {
  if (map_db_version != NULL) {
    
  } else {
    
  }
  map_db_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_db_version);
  // @@protoc_insertion_point(field_set_allocated:MultiEtaInfo.Request.map_db_version)
}

inline const Request* Request::internal_default_instance() {
  return &Request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusFieldNumber;
const int Response::kMsgFieldNumber;
const int Response::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiEtaInfo.Response)
}

void Response::InitAsDefaultInstance() {
  data_ = const_cast< ::MultiEtaInfo::ResponseData*>(
      ::MultiEtaInfo::ResponseData::internal_default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiEtaInfo.Response)
}

void Response::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  status_ = 0;
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:MultiEtaInfo.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Response_default_instance_.get()) {
    delete data_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  protobuf_InitDefaults_multi_5feta_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiEtaInfo.Response)
  status_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiEtaInfo.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MultiEtaInfo.Response.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .MultiEtaInfo.ResponseData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiEtaInfo.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiEtaInfo.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiEtaInfo.Response)
  // optional int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MultiEtaInfo.Response.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional .MultiEtaInfo.ResponseData data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:MultiEtaInfo.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultiEtaInfo.Response)
  // optional int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MultiEtaInfo.Response.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional .MultiEtaInfo.ResponseData data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultiEtaInfo.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiEtaInfo.Response)
  size_t total_size = 0;

  // optional int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // optional .MultiEtaInfo.ResponseData data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiEtaInfo.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiEtaInfo.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiEtaInfo.Response)
    UnsafeMergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiEtaInfo.Response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Response::UnsafeMergeFrom(const Response& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_data()) {
    mutable_data()->::MultiEtaInfo::ResponseData::MergeFrom(from.data());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiEtaInfo.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiEtaInfo.Response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(status_, other->status_);
  msg_.Swap(&other->msg_);
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional int32 status = 1;
void Response::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 Response::status() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Response.status)
  return status_;
}
void Response::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:MultiEtaInfo.Response.status)
}

// optional string msg = 2;
void Response::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Response::msg() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Response.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MultiEtaInfo.Response.msg)
}
void Response::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MultiEtaInfo.Response.msg)
}
void Response::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MultiEtaInfo.Response.msg)
}
::std::string* Response::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.Response.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_msg() {
  // @@protoc_insertion_point(field_release:MultiEtaInfo.Response.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:MultiEtaInfo.Response.msg)
}

// optional .MultiEtaInfo.ResponseData data = 3;
bool Response::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void Response::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::MultiEtaInfo::ResponseData& Response::data() const {
  // @@protoc_insertion_point(field_get:MultiEtaInfo.Response.data)
  return data_ != NULL ? *data_
                         : *::MultiEtaInfo::ResponseData::internal_default_instance();
}
::MultiEtaInfo::ResponseData* Response::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::MultiEtaInfo::ResponseData;
  }
  // @@protoc_insertion_point(field_mutable:MultiEtaInfo.Response.data)
  return data_;
}
::MultiEtaInfo::ResponseData* Response::release_data() {
  // @@protoc_insertion_point(field_release:MultiEtaInfo.Response.data)
  
  ::MultiEtaInfo::ResponseData* temp = data_;
  data_ = NULL;
  return temp;
}
void Response::set_allocated_data(::MultiEtaInfo::ResponseData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MultiEtaInfo.Response.data)
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MultiEtaInfo

// @@protoc_insertion_point(global_scope)
