#Generated by VisualGDB project wizard.
#Note: VisualGDB will automatically update this file when you add new sources to the project.

cmake_minimum_required(VERSION 2.7)
project(test)

if( WIN32 )
IF (NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Debug")
ENDIF()

else ( WIN32)
IF (NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Release")
ENDIF()
ENDIF(WIN32)

IF(${CMAKE_GENERATOR} STREQUAL "Visual Studio 12 Win64" OR ${CMAKE_GENERATOR} STREQUAL "Visual Studio 12 2013 Win64")
	MESSAGE (STATUS "Windows")
	SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MT /ZI /Od")
	SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT /Od")
ELSEIF (${CMAKE_GENERATOR} STREQUAL "Unix Makefiles")
	MESSAGE (STATUS "LINUX_x64")
	add_definitions(
		-LINUX_x64
		-DMAPBAR_LINUX
	)
	set(LINUX_x64 USE_FOLDERS on)
	SET (CMAKE_CXX_FLAGS_DEBUG "/MT")
SET (CMAKE_CXX_FLAGS_RELEASE "/MT")
	SET (CMAKE_C_FLAGS_DEBUG "-Wall -g -fshort-wchar -fwide-exec-charset=UTF-16LE -m64")
	SET (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Wall -O2 -fshort-wchar -fwide-exec-charset=UTF-16LE -m64")

	SET (CMAKE_CXX_FLAGS_DEBUG "-std=c++11 -Wall -g -fshort-wchar -fwide-exec-charset=UTF-16LE -m64")
	SET (CMAKE_CXX_FLAGS_RELEASE "-std=c++11 -Wall -O2 -fshort-wchar -fwide-exec-charset=UTF-16LE -m64")
endif()

#message("project: ${PROJECT_SOURCE_DIR}")

SET(ThirdParty_PATH ${PROJECT_SOURCE_DIR}/ThirdParty CACHE PATH "Location of 3rdparty dependencies")

SET(LibPath ${PROJECT_SOURCE_DIR} CACHE PATH "1")


INCLUDE_DIRECTORIES(
${ThirdParty_PATH}/protobuf/windows/bin
${ThirdParty_PATH}/protobuf/windows/include
${PROJECT_SOURCE_DIR}/include
E:/Anaconda3/include
)

link_directories(
${ThirdParty_PATH}/protobuf/windows/lib
E:/Anaconda3/libs
)

set(TARGET_H
	${ThirdParty_PATH}/protobuf/windows/bin/multi_eta_struct.pb.h
	${PROJECT_SOURCE_DIR}/include/request_pb_server.h
	${PROJECT_SOURCE_DIR}/include/creat_pb_func.h
	${PROJECT_SOURCE_DIR}/include/include.h
)

set(TARGET_C
	main.cpp
	creat_pb_func.cpp
	request_pb_server.cpp
	${ThirdParty_PATH}/protobuf/windows/bin/multi_eta_struct.pb.cc
)
add_executable(analysis_pb ${TARGET_C} ${TARGET_H})

target_link_libraries(analysis_pb libprotobufd libprotocd)
